#!/usr/bin/python
# -*- coding: utf-8 -*-

import sys
from PyQt4.QtGui import *
from PyQt4.QtCore import *
from Demo1 import *
from secondDialog import *

# Class for the main Dialog
class MyForm(QtGui.QDialog):
    def __init__(self,parent=None):
        QtGui.QWidget.__init__(self,parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)

        '''
        # Load the first image
        # Create the first GraphicsPixmapItem
        # Add the item to the first GraphicsScene
        # Set the scene in the first GraphicsView
        '''
        self.pixmap_VL = QtGui.QPixmap("image1.jpg")
        self.pixmapItem_VL = QtGui.QGraphicsPixmapItem(self.pixmap_VL)
        self.scene_VL = QGraphicsScene()
        self.scene_VL.addItem(self.pixmapItem_VL)
        self.ui.graphicsView_VL.setScene(self.scene_VL)
        '''
        # Load the second image
        # Create the second GraphicsPixmapItem
        # Add the item to the second GraphicsScene
        # Set the scene in the second GraphicsView
        '''
        self.pixmap_XR = QtGui.QPixmap("image2.jpg")
        self.pixmapItem_XR = QtGui.QGraphicsPixmapItem(self.pixmap_XR)
        self.scene_XR = QGraphicsScene()
        self.scene_XR.addItem(self.pixmapItem_XR)
        self.ui.graphicsView_XR.setScene(self.scene_XR)
        
        # Create the first RubberBand in the first GraphicsView
        self.rubberBand_VL = QtGui.QRubberBand(QtGui.QRubberBand.Rectangle,
                                             self.ui.graphicsView_VL)
        # Create the second RubberBand in the second GraphicsView
        self.rubberBand_XR = QtGui.QRubberBand(QtGui.QRubberBand.Rectangle,
                                             self.ui.graphicsView_XR)
        '''
        # Initialize variables
        '''
        # Motor Position
        self.xPos = 353
        self.yPos = 252
        self.zPos = 305
        # shift Motor Position
        self.xStep = 0
        self.yStep = 0
        self.zStep = 0
        # Scan Step Size
        self.scanStepX = 1
        self.scanStepY = 1
        # Dwell Time
        self.dwellTime = 0.1
        # Scan Area
        self.width_VL = 0
        self.height_VL = 0
        self.width_XR = 0
        self.height_XR = 0
        # Elements which user can select
        '''
        # SelectElements[0] represents Ti, SelectElements[1] represents V,
        # SelectElements[2] represents Cr, SelectElements[3] represents Mn,
        # SelectElements[4] represents Fe, SelectElements[5] represents Co,
        # SelectElements[6] represents Ni, SelectElements[7] represents Cu,
        # SelectElements[8] represents Zn, SelectElements[9] represents Ga,
        # SelectElements[10] represents Ge, SelectElements[11] represents As
        # SelectElements[12] represents Se, SelectElements[13] represents Br,
        # SelectElements[14] represents Kr, SelectElements[15] represents Rb,
        # SelectElements[16] represents Sr, SelectElements[17] represents Y,
        # SelectElements[18] represents Zr, SelectElements[19] represents Nb,
        # SelectElements[20] represents Mo, SelectElements[21] represents Tc,
        # SelectElements[22] represents Ru, SelectElements[23] represents Rh,
        # SelectElements[24] represents Pd, SelectElements[25] represents Ag,
        # SelectElements[26] represents Cd, SelectElements[27] represents In,
        # SelectElements[28] represents Sn, SelectElements[29] represents Sb,
        # SelectElements[30] represents Te, SelectElements[31] represents I,
        # SelectElements[32] represents Xe, SelectElements[33] represents Cs,
        # SelectElements[34] represents Ba, SelectElements[35] represents Hf,
        # SelectElements[36] represents Ta, SelectElements[37] represents W,
        # SelectElements[38] represents Re, SelectElements[39] represents Os,
        # SelectElements[40] represents Ir, SelectElements[41] represents Pt,
        # SelectElements[42] represents Au, SelectElements[43] represents Hg,
        # SelectElements[44] represents Tl, SelectElements[45] represents Pb,
        # SelectElements[46] represents Bi, SelectElements[47] represents Po,
        # SelectElements[48] represents At, SelectElements[49] represents Rn,
        # SelectElements[50] represents Fr, SelectElements[51] represents Ra,
        # SelectElements[52] represents La, SelectElements[53] represents Ce,
        # SelectElements[54] represents Pr, SelectElements[55] represents Nd,
        # SelectElements[56] represents Pm, SelectElements[57] represents Sm,
        # SelectElements[58] represents Eu, SelectElements[59] represents Gd,
        # SelectElements[60] represents Tb, SelectElements[61] represents Dy,
        # SelectElements[62] represents Ho, SelectElements[63] represents Er,
        # SelectElements[64] represents Tm, SelectElements[65] represents Yb,
        # SelectElements[66] represents Lu, SelectElements[67] represents Ac,
        # SelectElements[68] represents Th, SelectElements[69] represents Pa,
        # SelectElements[70] represents U, SelectElements[71] represents Np,
        # SelectElements[72] represents Pu, SelectElements[73] represents Am,
        
        # 0 means not selected, 1 means selected
        '''
        self.SelectElements = [0]*74
        # Store selection results temporarily
        self.tempSelectElements = self.SelectElements
        '''
        # All elements available for user to select
        '''
        self.knownElements = [["Ti",8],["V",9],["Cr",10],["Mn",11],["Fe",12],
                              ["Co",13],["Ni",14],["Cu",15],["Zn",16],["Ga",17],
                              ["Ge",18],["As",19],["Se",20],["Br",21],["Kr",22],
                              ["Rb",23],["Sr",24],["Y",25],["Zr",26],["Nb",27],
                              ["Mo",28],["Tc",29],["Ru",30],["Rh",31],["Pd",32],
                              ["Ag",33],["Cd",34],["In",35],["Sn",36],["Sb",37],
                              ["Te",38],["I",39],["Xe",40],["Cs",41],["Ba",42],
                              ["Hf",43],["Ta",44],["W",45],["Re",46],["Os",47],
                              ["Ir",48],["Pt",49],["Au",50],["Hg",51],["Tl",52],
                              ["Pb",53],["Bi",54],["Po",55],["At",56],["Rn",57],
                              ["Fr",58],["Ra",59],["La",60],["Ce",61],["Pr",62],
                              ["Nd",63],["Pm",64],["Sm",65],["Eu",66],["Gd",67],
                              ["Tb",68],["Dy",69],["Ho",70],["Er",71],["Tm",72],
                              ["Yb",73],["Lu",74],["Ac",75],["Th",76],["Pa",77],
                              ["U",78],["Np",79],["Pu",80],["Am",81]]
        self.count = 0
        '''
        # If user have selected a ROI in VL, then selected_VL = 1
        # Similar with selected_XR
        '''
        self.selected_VL = 0
        self.selected_XR = 0
        '''
        # Show the initialized values
        '''
        # Initialized as 353,252,305
        # Show Motor Position
        self.ui.MotorPositionX.setText(unicode(self.xPos))
        self.ui.MotorPositionY.setText(unicode(self.yPos))
        self.ui.MotorPositionZ.setText(unicode(self.zPos))
        # Initialized as Motor Position
        # User can enter desired Motor Position and click GO
        self.ui.toMotorPositionX.setText(unicode(self.xPos))
        self.ui.toMotorPositionY.setText(unicode(self.yPos))
        self.ui.toMotorPositionZ.setText(unicode(self.zPos))
        # Initialized as 0
        # User can enter values and click + for increasing, - for decreasing
        self.ui.shiftMotorPositionX.setText(unicode(self.xStep))
        self.ui.shiftMotorPositionY.setText(unicode(self.yStep))
        self.ui.shiftMotorPositionZ.setText(unicode(self.zStep))
        # Initialized as 1
        self.ui.ScanStepSizeX.setText(unicode(self.scanStepX))
        self.ui.ScanStepSizeY.setText(unicode(self.scanStepY))
        # Initialized as 0.1
        self.ui.DwellTime.setText(unicode(self.dwellTime))
        # Set standard model for Table View
        self.model = QStandardItemModel(1,2)
        self.model.setHorizontalHeaderItem(0,QStandardItem(QString("Elements")))
        self.model.setHorizontalHeaderItem(1,QStandardItem(QString("Energy")))
        self.ui.tableView.setModel(self.model)
        self.ui.tableView.setColumnWidth(0,100)
        self.ui.tableView.setColumnWidth(1,100)
        
    '''
    # Handles mouse events in graphicsView_VL and graphicsView_XR
    '''
    def eventFilter(self, source, event):
        # mouse press event in graphicsView_VL
        if (event.type() == QtCore.QEvent.GraphicsSceneMousePress
                and source is self.scene_VL):
            if event.button() == QtCore.Qt.LeftButton:
                # Clear graphicsScene_VL and graphicsScene_XR
                self.scene_VL.clear()
                self.pixmapItem_VL = QtGui.QGraphicsPixmapItem(self.pixmap_VL)
                self.scene_VL.addItem(self.pixmapItem_VL)
                self.scene_XR.clear()
                self.pixmapItem_XR = QtGui.QGraphicsPixmapItem(self.pixmap_XR)
                self.scene_XR.addItem(self.pixmapItem_XR)
                # Set selected_VL = 0 and selected_XR = 0
                self.selected_VL = 0
                self.selected_XR = 0
                # Set the width and the height of the scan area to 0
                self.width_VL = 0
                self.height_VL = 0
                self.ui.ScanAreaWidth.setText(unicode(self.width_VL))
                self.ui.ScanAreaHeight.setText(unicode(self.height_VL))
                
                # Get mouse coordinates
                self.startPos_VL = self.ui.graphicsView_VL.mapFromScene(event.scenePos())
                # Show start point coordinates
                self.ui.TopLeftX.setText(unicode(self.startPos_VL.x()))
                self.ui.TopLeftY.setText(unicode(self.startPos_VL.y()))
                # Start rubberBnad
                self.rubberBand_VL.setGeometry(QtCore.QRect(self.startPos_VL,
                                                            QtCore.QSize()))
                self.rubberBand_VL.show()
                
                return super(MyForm, self).eventFilter(source, event)
        # mouse move event in graphicsView_VL
        if (event.type() == QtCore.QEvent.GraphicsSceneMouseMove
                and source is self.scene_VL):
            if event.buttons() == Qt.LeftButton:
                # Get mouse coordinates
                self.currentPos_VL = self.ui.graphicsView_VL.mapFromScene(event.scenePos())
                # Update the rubberBand
                if self.rubberBand_VL.isVisible():
                    self.rubberBand_VL.setGeometry(QtCore.QRect(self.startPos_VL,
                                                                self.currentPos_VL).normalized())
    
                return super(MyForm, self).eventFilter(source, event)
        # mouse release event in graphicsView_VL
        if (event.type() == QtCore.QEvent.GraphicsSceneMouseRelease
                and source is self.scene_VL):
            if event.button() == QtCore.Qt.LeftButton:
                # Get mouse coordinates
                self.currentPos_VL = self.ui.graphicsView_VL.mapFromScene(event.scenePos())
                # Calculate scan area
                self.width_VL = self.currentPos_VL.x() - self.startPos_VL.x()
                self.height_VL = self.currentPos_VL.y() - self.startPos_VL.y()
                # Set selected_VL = 1
                self.selected_VL = 1
                # Hide the rubberBand_VL
                self.rubberBand_VL.hide()
                # Draw a red rectangle to show the selected area
                self.selectedRect_VL = QRectF(self.ui.graphicsView_VL.mapToScene(self.startPos_VL.x(),
                                                                                 self.startPos_VL.y()),
                                              QSizeF(self.width_VL,self.height_VL))
                self.scene_VL.addRect(self.selectedRect_VL,QtCore.Qt.red)
                # Show the width and the height of the scan area
                self.ui.ScanAreaWidth.setText(unicode(self.width_VL))
                self.ui.ScanAreaHeight.setText(unicode(self.height_VL))
                
                return super(MyForm, self).eventFilter(source, event)

        # mouse press event in graphicsView_XR
        if (event.type() == QtCore.QEvent.GraphicsSceneMousePress
                and source is self.scene_XR):
            if event.button() == QtCore.Qt.LeftButton:
                # Clear graphicsScene_VL and graphicsScene_XR
                self.scene_VL.clear()
                self.pixmapItem_VL = QtGui.QGraphicsPixmapItem(self.pixmap_VL)
                self.scene_VL.addItem(self.pixmapItem_VL)
                self.scene_XR.clear()
                self.pixmapItem_XR = QtGui.QGraphicsPixmapItem(self.pixmap_XR)
                self.scene_XR.addItem(self.pixmapItem_XR)
                # Set selected_XR = 0 and selected_VL = 0
                self.selected_XR = 0
                self.selected_VL = 0
                # Set the width and the height of the scan area to 0
                self.width_XR = 0
                self.height_XR = 0
                self.ui.ScanAreaWidth.setText(unicode(self.width_XR))
                self.ui.ScanAreaHeight.setText(unicode(self.height_XR))
                
                # Get mouse coordinates
                self.startPos_XR = self.ui.graphicsView_XR.mapFromScene(event.scenePos())
                # Show start point coordinates
                self.ui.TopLeftX.setText(unicode(self.startPos_XR.x()))
                self.ui.TopLeftY.setText(unicode(self.startPos_XR.y()))
                # Start rubberBnad
                self.rubberBand_XR.setGeometry(QtCore.QRect(self.startPos_XR, QtCore.QSize()))
                self.rubberBand_XR.show()
                
                return super(MyForm, self).eventFilter(source, event)
        # mouse move event in graphicsView_XR
        if (event.type() == QtCore.QEvent.GraphicsSceneMouseMove
                and source is self.scene_XR):
            if event.buttons() == Qt.LeftButton:
                # Get mouse coordinates
                self.currentPos_XR = self.ui.graphicsView_XR.mapFromScene(event.scenePos())
                # Update the rubberBand
                if self.rubberBand_XR.isVisible():
                    self.rubberBand_XR.setGeometry(QtCore.QRect(self.startPos_XR,
                                                                self.currentPos_XR).normalized())
    
                return super(MyForm, self).eventFilter(source, event)
        # mouse release event in graphicsView_XR
        if (event.type() == QtCore.QEvent.GraphicsSceneMouseRelease
                and source is self.scene_XR):
            if event.button() == QtCore.Qt.LeftButton:
                # Get mouse coordinates
                self.currentPos_XR = self.ui.graphicsView_XR.mapFromScene(event.scenePos())
                # Calculate scan area
                self.width_XR = self.currentPos_XR.x() - self.startPos_XR.x()
                self.height_XR = self.currentPos_XR.y() - self.startPos_XR.y()
                # Set selected_XR = 1
                self.selected_XR = 1
                # Hide the rubberBand_XR
                self.rubberBand_XR.hide()
                # Draw a red rectangle to show the selected area
                self.selectedRect_XR = QRectF(self.ui.graphicsView_XR.mapToScene(self.startPos_XR.x(),
                                                                                 self.startPos_XR.y()),
                                              QSizeF(self.width_XR,self.height_XR))
                self.scene_XR.addRect(self.selectedRect_XR,QtCore.Qt.red)
                # Show the width and the height of the scan area
                self.ui.ScanAreaWidth.setText(unicode(self.width_XR))
                self.ui.ScanAreaHeight.setText(unicode(self.height_XR))
                
                return super(MyForm, self).eventFilter(source, event)
        
        return False
    
    '''
    Handles button click events
    '''
    # Click 1st Go, change Motor Position X
    @QtCore.pyqtSlot()
    def on_changeMotorPositionX_clicked(self, checked=None):
        self.xPos = int(self.ui.toMotorPositionX.text())
        self.ui.MotorPositionX.setText(unicode(self.xPos))
    # Click 2nd Go, change Motor Position Y
    @QtCore.pyqtSlot()
    def on_changeMotorPositionY_clicked(self, checked=None):
        self.yPos = int(self.ui.toMotorPositionY.text())
        self.ui.MotorPositionY.setText(unicode(self.yPos))
    # Click 3rd Go, change Motor Position Z
    @QtCore.pyqtSlot()
    def on_changeMotorPositionZ_clicked(self, checked=None):
        self.zPos = int(self.ui.toMotorPositionZ.text())
        self.ui.MotorPositionZ.setText(unicode(self.zPos))
    
    # Click 1st -, decrease Motor Position X
    @QtCore.pyqtSlot()
    def on_minusMotorPositionX_clicked(self, checked=None):
        self.xStep = int(self.ui.shiftMotorPositionX.text())
        self.xPos -= self.xStep
        self.ui.MotorPositionX.setText(unicode(self.xPos))
    # Click 1st +, increase Motor Position X
    @QtCore.pyqtSlot()
    def on_plusMotorPositionX_clicked(self, checked=None):
        self.xStep = int(self.ui.shiftMotorPositionX.text())
        self.xPos += self.xStep
        self.ui.MotorPositionX.setText(unicode(self.xPos))
    
    # Click 2nd -, decrease Motor Position Y
    @QtCore.pyqtSlot()
    def on_minusMotorPositionY_clicked(self, checked=None):
        self.yStep = int(self.ui.shiftMotorPositionY.text())
        self.yPos -= self.yStep
        self.ui.MotorPositionY.setText(unicode(self.yPos))
    # Click 2nd +, increase Motor Position Y
    @QtCore.pyqtSlot()
    def on_plusMotorPositionY_clicked(self, checked=None):
        self.yStep = int(self.ui.shiftMotorPositionY.text())
        self.yPos += self.yStep
        self.ui.MotorPositionY.setText(unicode(self.yPos))
    
    # Click 3rd -, decrease Motor Position Z
    @QtCore.pyqtSlot()
    def on_minusMotorPositionZ_clicked(self, checked=None):
        self.zStep = int(self.ui.shiftMotorPositionZ.text())
        self.zPos -= self.zStep
        self.ui.MotorPositionZ.setText(unicode(self.zPos))
    # Click 3rd +, increase Motor Position Z
    @QtCore.pyqtSlot()
    def on_plusMotorPositionZ_clicked(self, checked=None):
        self.zStep = int(self.ui.shiftMotorPositionZ.text())
        self.zPos += self.zStep
        self.ui.MotorPositionZ.setText(unicode(self.zPos))

    # Start scanning process
    @QtCore.pyqtSlot()
    def on_ExecuteScan_clicked(self, checked=None):
        '''
        # If user has not selected a ROI
        # Print out a warning message
        '''
        if (self.selected_VL != 1 and self.selected_XR != 1):
            print "Please select ROI first!"
            QMessageBox.about(self, "Error",
                                  "Please select ROI first!")
        '''
        # If user has selected a ROI
        # Calculate TimeLeft
        # Start scanning process
        '''
        if (self.selected_VL == 1 or self.selected_XR == 1):
            # Get ScanStepSizeX
            self.scanStepX = int(self.ui.ScanStepSizeX.text())
            # Get ScanStepSizeY
            self.scanStepY = int(self.ui.ScanStepSizeY.text())
            # Get DwellTime
            self.dwellTime = float(self.ui.DwellTime.text())
            # Check if user has clicked MoveToStartPoint
            if (self.xPos != int(self.ui.TopLeftX.text())
                    or self.yPos != int(self.ui.TopLeftY.text())):
                print "Please click MoveToStartPoint button first!"
                QMessageBox.about(self, "Error",
                                  "Please click MoveToStartPoint button first!")
            else:
                '''
                # If user has selected a ROI in VL
                '''
                if self.selected_VL == 1:
                    # Calculate TimeLeft
                    self.timeLeft = self.width_VL * self.height_VL / (self.dwellTime * 1000)
                    # Show TimeLeft
                    self.ui.TimeLeft.setText(unicode(self.timeLeft)+"s")
                    # Print out coordinates of X and Y
                    print "Y Position Change:"
                    for j in range(0,self.height_VL,self.scanStepY):
                        self.yPos += self.scanStepY
                        print self.yPos
                        self.ui.MotorPositionY.setText(unicode(self.yPos))
                    print "X Position Change:"  
                    for i in range(0,self.width_VL,self.scanStepX):
                        self.xPos += self.scanStepX
                        print self.xPos
                        self.ui.MotorPositionX.setText(unicode(self.xPos))
                    # Set selected_VL = 0
                    self.selected_VL = 0
                '''
                # If user has selected a ROI in XR
                '''
                if self.selected_XR == 1:
                    # Calculate TimeLeft
                    self.timeLeft = self.width_XR * self.height_XR / (self.dwellTime * 1000)
                    # Show TimeLeft
                    self.ui.TimeLeft.setText(unicode(self.timeLeft)+"s")
                    # Print out coordinates of X and Y
                    print "Y Position Change:"
                    for j in range(0,self.height_XR,self.scanStepY):
                        self.yPos += self.scanStepY
                        print self.yPos
                        self.ui.MotorPositionY.setText(unicode(self.yPos))
                    print "X Position Change:"  
                    for i in range(0,self.width_XR,self.scanStepX):
                        self.xPos += self.scanStepX
                        print self.xPos
                        self.ui.MotorPositionX.setText(unicode(self.xPos))
                    # Set selected_XR = 0
                    self.selected_XR = 0
    
    # Move the motor to selected start point
    @QtCore.pyqtSlot()
    def on_MoveToStartPoint_clicked(self, checked=None):
        if (self.selected_VL == 1 or self.selected_XR == 1):
            self.xPos = int(self.ui.TopLeftX.text())
            self.yPos = int(self.ui.TopLeftY.text())

            self.ui.MotorPositionX.setText(unicode(self.xPos))
            self.ui.MotorPositionY.setText(unicode(self.yPos))
        else:
            print "Please select ROI first!"
            QMessageBox.about(self, "Error",
                                  "Please select ROI first!")
    '''
    # Open a new Dialog
    # Allow user to select elements
    '''
    def on_ModifyElement_clicked(self, checked=None):
        if checked==None:return
        '''
        # Open a periodic table for user to select elements
        # Get user's selection
        '''
        (self.tempSelectElements,ok) = PeriodicTable.getSelectedElements(self.SelectElements)
        '''
        # If user click OK, store the selection results
        # Else, discard the selection results
        '''
        if ok == True:
            self.SelectElements = self.tempSelectElements
            # Show selection results in the table view
            for x in range(self.count):
                self.model.setItem(x,0,QStandardItem(QString("")))
                self.model.setItem(x,1,QStandardItem(QString("")))
            self.count = 0
            for index in range(len(self.SelectElements)):
                if self.SelectElements[index] == 1:
                    self.model.setItem(self.count,0,
                                       QStandardItem(QString(self.knownElements[index][0])))
                    self.model.setItem(self.count,1,
                                       QStandardItem(QString(unicode(self.knownElements[index][1]))))
                    self.count = self.count + 1
            # Remove blank rows
            if (self.model.rowCount() > self.count):
                self.model.removeRows(self.count,self.model.rowCount() - self.count)

# Class for the Periodic Table Dialog
class PeriodicTable(QtGui.QDialog):
    def __init__(self,SelectedElements,parent=None):
        QtGui.QWidget.__init__(self,parent)
        self.ui = Ui_PeriodicTableDialog()
        self.ui.setupUi(self)
        # Intialize variables
        self.SelectTi = 0
        self.SelectV = 0
        self.SelectCr = 0
        self.SelectMn = 0
        self.SelectFe = 0
        self.SelectCo = 0
        self.SelectNi = 0
        self.SelectCu = 0
        self.SelectZn = 0
        self.SelectGa = 0
        self.SelectGe = 0
        self.SelectAs = 0
        self.SelectSe = 0
        self.SelectBr = 0
        self.SelectKr = 0
        self.SelectRb = 0
        self.SelectSr = 0
        self.SelectY = 0
        self.SelectZr = 0
        self.SelectNb = 0
        self.SelectMo = 0
        self.SelectTc = 0
        self.SelectRu = 0
        self.SelectRh = 0
        self.SelectPd = 0
        self.SelectAg = 0
        self.SelectCd = 0
        self.SelectIn = 0
        self.SelectSn = 0
        self.SelectSb = 0
        self.SelectTe = 0
        self.SelectI = 0
        self.SelectXe = 0
        self.SelectCs = 0
        self.SelectBa = 0
        self.SelectHf = 0
        self.SelectTa = 0
        self.SelectW = 0
        self.SelectRe = 0
        self.SelectOs = 0
        self.SelectIr = 0
        self.SelectPt = 0
        self.SelectAu = 0
        self.SelectHg = 0
        self.SelectTl = 0
        self.SelectPb = 0
        self.SelectBi = 0
        self.SelectPo = 0
        self.SelectAt = 0
        self.SelectRn = 0
        self.SelectFr = 0
        self.SelectRa = 0
        self.SelectLa = 0
        self.SelectCe = 0
        self.SelectPr = 0
        self.SelectNd = 0
        self.SelectPm = 0
        self.SelectSm = 0
        self.SelectEu = 0
        self.SelectGd = 0
        self.SelectTb = 0
        self.SelectDy = 0
        self.SelectHo = 0
        self.SelectEr = 0
        self.SelectTm = 0
        self.SelectYb = 0
        self.SelectLu = 0
        self.SelectAc = 0
        self.SelectTh = 0
        self.SelectPa = 0
        self.SelectU = 0
        self.SelectNp = 0
        self.SelectPu = 0
        self.SelectAm = 0
        # Set properties of buttons for each element
        self.ui.Ti.setCheckable(True)
        self.ui.Ti.clicked[bool].connect(self.modifyElement)
        self.ui.Ti.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.V.setCheckable(True)
        self.ui.V.clicked[bool].connect(self.modifyElement)
        self.ui.V.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Cr.setCheckable(True)
        self.ui.Cr.clicked[bool].connect(self.modifyElement)
        self.ui.Cr.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Mn.setCheckable(True)
        self.ui.Mn.clicked[bool].connect(self.modifyElement)
        self.ui.Mn.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Fe.setCheckable(True)
        self.ui.Fe.clicked[bool].connect(self.modifyElement)
        self.ui.Fe.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Co.setCheckable(True)
        self.ui.Co.clicked[bool].connect(self.modifyElement)
        self.ui.Co.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ni.setCheckable(True)
        self.ui.Ni.clicked[bool].connect(self.modifyElement)
        self.ui.Ni.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Cu.setCheckable(True)
        self.ui.Cu.clicked[bool].connect(self.modifyElement)
        self.ui.Cu.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Zn.setCheckable(True)
        self.ui.Zn.clicked[bool].connect(self.modifyElement)
        self.ui.Zn.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ga.setCheckable(True)
        self.ui.Ga.clicked[bool].connect(self.modifyElement)
        self.ui.Ga.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ge.setCheckable(True)
        self.ui.Ge.clicked[bool].connect(self.modifyElement)
        self.ui.Ge.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.As.setCheckable(True)
        self.ui.As.clicked[bool].connect(self.modifyElement)
        self.ui.As.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Se.setCheckable(True)
        self.ui.Se.clicked[bool].connect(self.modifyElement)
        self.ui.Se.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Br.setCheckable(True)
        self.ui.Br.clicked[bool].connect(self.modifyElement)
        self.ui.Br.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Kr.setCheckable(True)
        self.ui.Kr.clicked[bool].connect(self.modifyElement)
        self.ui.Kr.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Rb.setCheckable(True)
        self.ui.Rb.clicked[bool].connect(self.modifyElement)
        self.ui.Rb.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Sr.setCheckable(True)
        self.ui.Sr.clicked[bool].connect(self.modifyElement)
        self.ui.Sr.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Y.setCheckable(True)
        self.ui.Y.clicked[bool].connect(self.modifyElement)
        self.ui.Y.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Zr.setCheckable(True)
        self.ui.Zr.clicked[bool].connect(self.modifyElement)
        self.ui.Zr.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Nb.setCheckable(True)
        self.ui.Nb.clicked[bool].connect(self.modifyElement)
        self.ui.Nb.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Mo.setCheckable(True)
        self.ui.Mo.clicked[bool].connect(self.modifyElement)
        self.ui.Mo.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Tc.setCheckable(True)
        self.ui.Tc.clicked[bool].connect(self.modifyElement)
        self.ui.Tc.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ru.setCheckable(True)
        self.ui.Ru.clicked[bool].connect(self.modifyElement)
        self.ui.Ru.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Rh.setCheckable(True)
        self.ui.Rh.clicked[bool].connect(self.modifyElement)
        self.ui.Rh.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Pd.setCheckable(True)
        self.ui.Pd.clicked[bool].connect(self.modifyElement)
        self.ui.Pd.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ag.setCheckable(True)
        self.ui.Ag.clicked[bool].connect(self.modifyElement)
        self.ui.Ag.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Cd.setCheckable(True)
        self.ui.Cd.clicked[bool].connect(self.modifyElement)
        self.ui.Cd.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.In.setCheckable(True)
        self.ui.In.clicked[bool].connect(self.modifyElement)
        self.ui.In.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Sn.setCheckable(True)
        self.ui.Sn.clicked[bool].connect(self.modifyElement)
        self.ui.Sn.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Sb.setCheckable(True)
        self.ui.Sb.clicked[bool].connect(self.modifyElement)
        self.ui.Sb.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Te.setCheckable(True)
        self.ui.Te.clicked[bool].connect(self.modifyElement)
        self.ui.Te.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.I.setCheckable(True)
        self.ui.I.clicked[bool].connect(self.modifyElement)
        self.ui.I.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Xe.setCheckable(True)
        self.ui.Xe.clicked[bool].connect(self.modifyElement)
        self.ui.Xe.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Cs.setCheckable(True)
        self.ui.Cs.clicked[bool].connect(self.modifyElement)
        self.ui.Cs.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ba.setCheckable(True)
        self.ui.Ba.clicked[bool].connect(self.modifyElement)
        self.ui.Ba.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Hf.setCheckable(True)
        self.ui.Hf.clicked[bool].connect(self.modifyElement)
        self.ui.Hf.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ta.setCheckable(True)
        self.ui.Ta.clicked[bool].connect(self.modifyElement)
        self.ui.Ta.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.W.setCheckable(True)
        self.ui.W.clicked[bool].connect(self.modifyElement)
        self.ui.W.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Re.setCheckable(True)
        self.ui.Re.clicked[bool].connect(self.modifyElement)
        self.ui.Re.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Os.setCheckable(True)
        self.ui.Os.clicked[bool].connect(self.modifyElement)
        self.ui.Os.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ir.setCheckable(True)
        self.ui.Ir.clicked[bool].connect(self.modifyElement)
        self.ui.Ir.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Pt.setCheckable(True)
        self.ui.Pt.clicked[bool].connect(self.modifyElement)
        self.ui.Pt.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Au.setCheckable(True)
        self.ui.Au.clicked[bool].connect(self.modifyElement)
        self.ui.Au.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Hg.setCheckable(True)
        self.ui.Hg.clicked[bool].connect(self.modifyElement)
        self.ui.Hg.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Tl.setCheckable(True)
        self.ui.Tl.clicked[bool].connect(self.modifyElement)
        self.ui.Tl.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Pb.setCheckable(True)
        self.ui.Pb.clicked[bool].connect(self.modifyElement)
        self.ui.Pb.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Bi.setCheckable(True)
        self.ui.Bi.clicked[bool].connect(self.modifyElement)
        self.ui.Bi.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Po.setCheckable(True)
        self.ui.Po.clicked[bool].connect(self.modifyElement)
        self.ui.Po.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.At.setCheckable(True)
        self.ui.At.clicked[bool].connect(self.modifyElement)
        self.ui.At.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Rn.setCheckable(True)
        self.ui.Rn.clicked[bool].connect(self.modifyElement)
        self.ui.Rn.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Fr.setCheckable(True)
        self.ui.Fr.clicked[bool].connect(self.modifyElement)
        self.ui.Fr.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ra.setCheckable(True)
        self.ui.Ra.clicked[bool].connect(self.modifyElement)
        self.ui.Ra.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.La.setCheckable(True)
        self.ui.La.clicked[bool].connect(self.modifyElement)
        self.ui.La.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ce.setCheckable(True)
        self.ui.Ce.clicked[bool].connect(self.modifyElement)
        self.ui.Ce.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Pr.setCheckable(True)
        self.ui.Pr.clicked[bool].connect(self.modifyElement)
        self.ui.Pr.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Nd.setCheckable(True)
        self.ui.Nd.clicked[bool].connect(self.modifyElement)
        self.ui.Nd.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Pm.setCheckable(True)
        self.ui.Pm.clicked[bool].connect(self.modifyElement)
        self.ui.Pm.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Sm.setCheckable(True)
        self.ui.Sm.clicked[bool].connect(self.modifyElement)
        self.ui.Sm.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Eu.setCheckable(True)
        self.ui.Eu.clicked[bool].connect(self.modifyElement)
        self.ui.Eu.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Gd.setCheckable(True)
        self.ui.Gd.clicked[bool].connect(self.modifyElement)
        self.ui.Gd.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Tb.setCheckable(True)
        self.ui.Tb.clicked[bool].connect(self.modifyElement)
        self.ui.Tb.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Dy.setCheckable(True)
        self.ui.Dy.clicked[bool].connect(self.modifyElement)
        self.ui.Dy.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ho.setCheckable(True)
        self.ui.Ho.clicked[bool].connect(self.modifyElement)
        self.ui.Ho.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Er.setCheckable(True)
        self.ui.Er.clicked[bool].connect(self.modifyElement)
        self.ui.Er.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Tm.setCheckable(True)
        self.ui.Tm.clicked[bool].connect(self.modifyElement)
        self.ui.Tm.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Yb.setCheckable(True)
        self.ui.Yb.clicked[bool].connect(self.modifyElement)
        self.ui.Yb.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Lu.setCheckable(True)
        self.ui.Lu.clicked[bool].connect(self.modifyElement)
        self.ui.Lu.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Ac.setCheckable(True)
        self.ui.Ac.clicked[bool].connect(self.modifyElement)
        self.ui.Ac.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Th.setCheckable(True)
        self.ui.Th.clicked[bool].connect(self.modifyElement)
        self.ui.Th.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Pa.setCheckable(True)
        self.ui.Pa.clicked[bool].connect(self.modifyElement)
        self.ui.Pa.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.U.setCheckable(True)
        self.ui.U.clicked[bool].connect(self.modifyElement)
        self.ui.U.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Np.setCheckable(True)
        self.ui.Np.clicked[bool].connect(self.modifyElement)
        self.ui.Np.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Pu.setCheckable(True)
        self.ui.Pu.clicked[bool].connect(self.modifyElement)
        self.ui.Pu.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        self.ui.Am.setCheckable(True)
        self.ui.Am.clicked[bool].connect(self.modifyElement)
        self.ui.Am.setStyleSheet("QPushButton { background-color: white }"
                      "QPushButton:pressed { background-color: red }" )
        # Load user's previous selection
        if SelectedElements[0] == 1:  
            self.ui.Ti.click()
        if SelectedElements[1] == 1:
            self.ui.V.click()
        if SelectedElements[2] == 1:
            self.ui.Cr.click()
        if SelectedElements[3] == 1:
            self.ui.Mn.click()
        if SelectedElements[4] == 1:
            self.ui.Fe.click()
        if SelectedElements[5] == 1:  
            self.ui.Co.click()
        if SelectedElements[6] == 1:
            self.ui.Ni.click()
        if SelectedElements[7] == 1:
            self.ui.Cu.click()
        if SelectedElements[8] == 1:
            self.ui.Zn.click()
        if SelectedElements[9] == 1:
            self.ui.Ga.click()
        if SelectedElements[10] == 1:  
            self.ui.Ge.click()
        if SelectedElements[11] == 1:
            self.ui.As.click()
        if SelectedElements[12] == 1:
            self.ui.Se.click()
        if SelectedElements[13] == 1:
            self.ui.Br.click()
        if SelectedElements[14] == 1:
            self.ui.Kr.click()
        if SelectedElements[15] == 1:  
            self.ui.Rb.click()
        if SelectedElements[16] == 1:
            self.ui.Sr.click()
        if SelectedElements[17] == 1:
            self.ui.Y.click()
        if SelectedElements[18] == 1:
            self.ui.Zr.click()
        if SelectedElements[19] == 1:
            self.ui.Nb.click()
        if SelectedElements[20] == 1:
            self.ui.Mo.click()
        if SelectedElements[21] == 1:
            self.ui.Tc.click()
        if SelectedElements[22] == 1:  
            self.ui.Ru.click()
        if SelectedElements[23] == 1:
            self.ui.Rh.click()
        if SelectedElements[24] == 1:
            self.ui.Pd.click()
        if SelectedElements[25] == 1:
            self.ui.Ag.click()
        if SelectedElements[26] == 1:
            self.ui.Cd.click()
        if SelectedElements[27] == 1:  
            self.ui.In.click()
        if SelectedElements[28] == 1:
            self.ui.Sn.click()
        if SelectedElements[29] == 1:
            self.ui.Sb.click()
        if SelectedElements[30] == 1:
            self.ui.Te.click()
        if SelectedElements[31] == 1:
            self.ui.I.click()
        if SelectedElements[32] == 1:  
            self.ui.Xe.click()
        if SelectedElements[33] == 1:
            self.ui.Cs.click()
        if SelectedElements[34] == 1:
            self.ui.Ba.click()
        if SelectedElements[35] == 1:
            self.ui.Hf.click()
        if SelectedElements[36] == 1:
            self.ui.Ta.click()
        if SelectedElements[37] == 1:  
            self.ui.W.click()
        if SelectedElements[38] == 1:
            self.ui.Re.click()
        if SelectedElements[39] == 1:
            self.ui.Os.click()
        if SelectedElements[40] == 1:
            self.ui.Ir.click()
        if SelectedElements[41] == 1:
            self.ui.Pt.click()
        if SelectedElements[42] == 1:
            self.ui.Au.click()
        if SelectedElements[43] == 1:
            self.ui.Hg.click()
        if SelectedElements[44] == 1:  
            self.ui.Tl.click()
        if SelectedElements[45] == 1:
            self.ui.Pb.click()
        if SelectedElements[46] == 1:
            self.ui.Bi.click()
        if SelectedElements[47] == 1:
            self.ui.Po.click()
        if SelectedElements[48] == 1:
            self.ui.At.click()
        if SelectedElements[49] == 1:  
            self.ui.Rn.click()
        if SelectedElements[50] == 1:
            self.ui.Fr.click()
        if SelectedElements[51] == 1:
            self.ui.Ra.click()
        if SelectedElements[52] == 1:
            self.ui.La.click()
        if SelectedElements[53] == 1:
            self.ui.Ce.click()
        if SelectedElements[54] == 1:  
            self.ui.Pr.click()
        if SelectedElements[55] == 1:
            self.ui.Nd.click()
        if SelectedElements[56] == 1:
            self.ui.Pm.click()
        if SelectedElements[57] == 1:
            self.ui.Sm.click()
        if SelectedElements[58] == 1:
            self.ui.Eu.click()
        if SelectedElements[59] == 1:  
            self.ui.Gd.click()
        if SelectedElements[60] == 1:
            self.ui.Tb.click()
        if SelectedElements[61] == 1:
            self.ui.Dy.click()
        if SelectedElements[62] == 1:
            self.ui.Ho.click()
        if SelectedElements[63] == 1:
            self.ui.Er.click()
        if SelectedElements[64] == 1:
            self.ui.Tm.click()
        if SelectedElements[65] == 1:
            self.ui.Yb.click()
        if SelectedElements[66] == 1:  
            self.ui.Lu.click()
        if SelectedElements[67] == 1:
            self.ui.Ac.click()
        if SelectedElements[68] == 1:
            self.ui.Th.click()
        if SelectedElements[69] == 1:
            self.ui.Pa.click()
        if SelectedElements[70] == 1:
            self.ui.U.click()
        if SelectedElements[71] == 1:  
            self.ui.Np.click()
        if SelectedElements[72] == 1:
            self.ui.Pu.click()
        if SelectedElements[73] == 1:
            self.ui.Am.click()
    # Handle user's selection
    def modifyElement(self, pressed):
        source = self.sender()
        if pressed:
            if source.text() == "Ti":
                self.SelectTi = 1
            elif source.text() == "V":
                self.SelectV = 1
            elif source.text() == "Cr":
                self.SelectCr = 1
            elif source.text() == "Mn":
                self.SelectMn = 1
            elif source.text() == "Fe":
                self.SelectFe = 1
            elif source.text() == "Co":
                self.SelectCo = 1
            elif source.text() == "Ni":
                self.SelectNi = 1
            elif source.text() == "Cu":
                self.SelectCu = 1
            elif source.text() == "Zn":
                self.SelectZn = 1
            elif source.text() == "Ga":
                self.SelectGa = 1
            elif source.text() == "Ge":
                self.SelectGe = 1
            elif source.text() == "As":
                self.SelectAs = 1
            elif source.text() == "Se":
                self.SelectSe = 1
            elif source.text() == "Br":
                self.SelectBr = 1
            elif source.text() == "Kr":
                self.SelectKr = 1
            elif source.text() == "Rb":
                self.SelectRb = 1
            elif source.text() == "Sr":
                self.SelectSr = 1
            elif source.text() == "Y":
                self.SelectY = 1
            elif source.text() == "Zr":
                self.SelectZr = 1
            elif source.text() == "Nb":
                self.SelectNb = 1
            elif source.text() == "Mo":
                self.SelectMo = 1
            elif source.text() == "Tc":
                self.SelectTc = 1
            elif source.text() == "Ru":
                self.SelectRu = 1
            elif source.text() == "Rh":
                self.SelectRh = 1
            elif source.text() == "Pd":
                self.SelectPd = 1
            elif source.text() == "Ag":
                self.SelectAg = 1
            elif source.text() == "Cd":
                self.SelectCd = 1
            elif source.text() == "In":
                self.SelectIn = 1
            elif source.text() == "Sn":
                self.SelectSn = 1
            elif source.text() == "Sb":
                self.SelectSb = 1
            elif source.text() == "Te":
                self.SelectTe = 1
            elif source.text() == "I":
                self.SelectI = 1
            elif source.text() == "Xe":
                self.SelectXe = 1
            elif source.text() == "Cs":
                self.SelectCs = 1
            elif source.text() == "Ba":
                self.SelectBa = 1
            elif source.text() == "Hf":
                self.SelectHf = 1
            elif source.text() == "Ta":
                self.SelectTa = 1
            elif source.text() == "W":
                self.SelectW = 1
            elif source.text() == "Re":
                self.SelectRe = 1
            elif source.text() == "Os":
                self.SelectOs = 1
            elif source.text() == "Ir":
                self.SelectIr = 1
            elif source.text() == "Pt":
                self.SelectPt = 1
            elif source.text() == "Au":
                self.SelectAu = 1
            elif source.text() == "Hg":
                self.SelectHg = 1
            elif source.text() == "Tl":
                self.SelectTl = 1
            elif source.text() == "Pb":
                self.SelectPb = 1
            elif source.text() == "Bi":
                self.SelectBi = 1
            elif source.text() == "Po":
                self.SelectPo = 1
            elif source.text() == "At":
                self.SelectAt = 1
            elif source.text() == "Rn":
                self.SelectRn = 1
            elif source.text() == "Fr":
                self.SelectFr = 1
            elif source.text() == "Ra":
                self.SelectRa = 1
            elif source.text() == "La":
                self.SelectLa = 1
            elif source.text() == "Ce":
                self.SelectCe = 1
            elif source.text() == "Pr":
                self.SelectPr = 1
            elif source.text() == "Nd":
                self.SelectNd = 1
            elif source.text() == "Pm":
                self.SelectPm = 1
            elif source.text() == "Sm":
                self.SelectSm = 1
            elif source.text() == "Eu":
                self.SelectEu = 1
            elif source.text() == "Gd":
                self.SelectGd = 1
            elif source.text() == "Tb":
                self.SelectTb = 1
            elif source.text() == "Dy":
                self.SelectDy = 1
            elif source.text() == "Ho":
                self.SelectHo = 1
            elif source.text() == "Er":
                self.SelectEr = 1
            elif source.text() == "Tm":
                self.SelectTm = 1
            elif source.text() == "Yb":
                self.SelectYb = 1
            elif source.text() == "Lu":
                self.SelectLu = 1
            elif source.text() == "Ac":
                self.SelectAc = 1
            elif source.text() == "Th":
                self.SelectTh = 1
            elif source.text() == "Pa":
                self.SelectPa = 1
            elif source.text() == "U":
                self.SelectU = 1
            elif source.text() == "Np":
                self.SelectNp = 1
            elif source.text() == "Pu":
                self.SelectPu = 1
            elif source.text() == "Am":
                self.SelectAm = 1
        else:
            if source.text() == "Ti":
                self.SelectTi = 0
            elif source.text() == "V":
                self.SelectV = 0
            elif source.text() == "Cr":
                self.SelectCr = 0
            elif source.text() == "Mn":
                self.SelectMn = 0
            elif source.text() == "Fe":
                self.SelectFe = 0
            elif source.text() == "Co":
                self.SelectCo = 0
            elif source.text() == "Ni":
                self.SelectNi = 0
            elif source.text() == "Cu":
                self.SelectCu = 0
            elif source.text() == "Zn":
                self.SelectZn = 0
            elif source.text() == "Ga":
                self.SelectGa = 0
            elif source.text() == "Ge":
                self.SelectGe = 0
            elif source.text() == "As":
                self.SelectAs = 0
            elif source.text() == "Se":
                self.SelectSe = 0
            elif source.text() == "Br":
                self.SelectBr = 0
            elif source.text() == "Kr":
                self.SelectKr = 0
            elif source.text() == "Rb":
                self.SelectRb = 0
            elif source.text() == "Sr":
                self.SelectSr = 0
            elif source.text() == "Y":
                self.SelectY = 0
            elif source.text() == "Zr":
                self.SelectZr = 0
            elif source.text() == "Nb":
                self.SelectNb = 0
            elif source.text() == "Mo":
                self.SelectMo = 0
            elif source.text() == "Tc":
                self.SelectTc = 0
            elif source.text() == "Ru":
                self.SelectRu = 0
            elif source.text() == "Rh":
                self.SelectRh = 0
            elif source.text() == "Pd":
                self.SelectPd = 0
            elif source.text() == "Ag":
                self.SelectAg = 0
            elif source.text() == "Cd":
                self.SelectCd = 0
            elif source.text() == "In":
                self.SelectIn = 0
            elif source.text() == "Sn":
                self.SelectSn = 0
            elif source.text() == "Sb":
                self.SelectSb = 0
            elif source.text() == "Te":
                self.SelectTe = 0
            elif source.text() == "I":
                self.SelectI = 0
            elif source.text() == "Xe":
                self.SelectXe = 0
            elif source.text() == "Cs":
                self.SelectCs = 0
            elif source.text() == "Ba":
                self.SelectBa = 0
            elif source.text() == "Hf":
                self.SelectHf = 0
            elif source.text() == "Ta":
                self.SelectTa = 0
            elif source.text() == "W":
                self.SelectW = 0
            elif source.text() == "Re":
                self.SelectRe = 0
            elif source.text() == "Os":
                self.SelectOs = 0
            elif source.text() == "Ir":
                self.SelectIr = 0
            elif source.text() == "Pt":
                self.SelectPt = 0
            elif source.text() == "Au":
                self.SelectAu = 0
            elif source.text() == "Hg":
                self.SelectHg = 0
            elif source.text() == "Tl":
                self.SelectTl = 0
            elif source.text() == "Pb":
                self.SelectPb = 0
            elif source.text() == "Bi":
                self.SelectBi = 0
            elif source.text() == "Po":
                self.SelectPo = 0
            elif source.text() == "At":
                self.SelectAt = 0
            elif source.text() == "Rn":
                self.SelectRn = 0
            elif source.text() == "Fr":
                self.SelectFr = 0
            elif source.text() == "Ra":
                self.SelectRa = 0
            elif source.text() == "La":
                self.SelectLa = 0
            elif source.text() == "Ce":
                self.SelectCe = 0
            elif source.text() == "Pr":
                self.SelectPr = 0
            elif source.text() == "Nd":
                self.SelectNd = 0
            elif source.text() == "Pm":
                self.SelectPm = 0
            elif source.text() == "Sm":
                self.SelectSm = 0
            elif source.text() == "Eu":
                self.SelectEu = 0
            elif source.text() == "Gd":
                self.SelectGd = 0
            elif source.text() == "Tb":
                self.SelectTb = 0
            elif source.text() == "Dy":
                self.SelectDy = 0
            elif source.text() == "Ho":
                self.SelectHo = 0
            elif source.text() == "Er":
                self.SelectEr = 0
            elif source.text() == "Tm":
                self.SelectTm = 0
            elif source.text() == "Yb":
                self.SelectYb = 0
            elif source.text() == "Lu":
                self.SelectLu = 0
            elif source.text() == "Ac":
                self.SelectAc = 0
            elif source.text() == "Th":
                self.SelectTh = 0
            elif source.text() == "Pa":
                self.SelectPa = 0
            elif source.text() == "U":
                self.SelectU = 0
            elif source.text() == "Np":
                self.SelectNp = 0
            elif source.text() == "Pu":
                self.SelectPu = 0
            elif source.text() == "Am":
                self.SelectAm = 0
    # Returen use's selection result
    @staticmethod
    def getSelectedElements(SelectedElements):
        dialog = PeriodicTable(SelectedElements)
        result = dialog.exec_()
        dialog.SelectElements = [dialog.SelectTi,dialog.SelectV,dialog.SelectCr,
                                 dialog.SelectMn,dialog.SelectFe,dialog.SelectCo,
                                 dialog.SelectNi,dialog.SelectCu,dialog.SelectZn,
                                 dialog.SelectGa,dialog.SelectGe,dialog.SelectAs,
                                 dialog.SelectSe,dialog.SelectBr,dialog.SelectKr,
                                 dialog.SelectRb,dialog.SelectSr,dialog.SelectY,
                                 dialog.SelectZr,dialog.SelectNb,dialog.SelectMo,
                                 dialog.SelectTc,dialog.SelectRu,dialog.SelectRh,
                                 dialog.SelectPd,dialog.SelectAg,dialog.SelectCd,
                                 dialog.SelectIn,dialog.SelectSn,dialog.SelectSb,
                                 dialog.SelectTe,dialog.SelectI,dialog.SelectXe,
                                 dialog.SelectCs,dialog.SelectBa,dialog.SelectHf,
                                 dialog.SelectTa,dialog.SelectW,dialog.SelectRe,
                                 dialog.SelectOs,dialog.SelectIr,dialog.SelectPt,
                                 dialog.SelectAu,dialog.SelectHg,dialog.SelectTl,
                                 dialog.SelectPb,dialog.SelectBi,dialog.SelectPo,
                                 dialog.SelectAt,dialog.SelectRn,dialog.SelectFr,
                                 dialog.SelectRa,dialog.SelectLa,dialog.SelectCe,
                                 dialog.SelectPr,dialog.SelectNd,dialog.SelectPm,
                                 dialog.SelectSm,dialog.SelectEu,dialog.SelectGd,
                                 dialog.SelectTb,dialog.SelectDy,dialog.SelectHo,
                                 dialog.SelectEr,dialog.SelectTm,dialog.SelectYb,
                                 dialog.SelectLu,dialog.SelectAc,dialog.SelectTh,
                                 dialog.SelectPa,dialog.SelectU,dialog.SelectNp,
                                 dialog.SelectPu,dialog.SelectAm,
                                 ]
        return (dialog.SelectElements, result == QDialog.Accepted)
    '''
    # If user click OK
    # Accept the selection
    # Close the Dialog
    '''
    def on_OK_clicked(self, checked=None):
        self.accept()
        self.close()
    '''
    # If user click Cancel
    # Close the Dialog
    '''
    def on_Cancel_clicked(self, checked=None):
        self.close()

'''
# main method
'''
def main():
    app = QtGui.QApplication(sys.argv)
    mainWindow = MyForm()
    mainWindow.show()
    app.installEventFilter(mainWindow)
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
